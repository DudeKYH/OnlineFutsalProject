// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Users {
  userId        Int         @id @default(autoincrement())
  name          String      @unique
  password      String        
  rating        Int         @default(1000)

  createdAt     DateTime    @default(now()) 
  updatedAt     DateTime    @updatedAt

  userPlayers   UserPlayers[]
  teams         Teams[]
  Caches        Caches[]
  Users         MatchLogs[]   @relation("Users")
  EnemyUsers    MatchLogs[]   @relation("EnemyUsers")

  @@map("Users")
}

model UserPlayers {
  userPlayerId  Int         @id @default(autoincrement())
  userId        Int
  users         Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  playerId      Int

  count         Int
  upgrade       Int         @default(1)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt 

  UserPlayer1   Teams[]     @relation("UserPlayer1")
  UserPlayer2   Teams[]     @relation("UserPlayer2")
  UserPlayer3   Teams[]     @relation("UserPlayer3")

  @@map("UserPlayers")
}

model Teams {
  teamId        Int         @id @default(autoincrement())
  userId        Int
  users         Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userPlayerId1 Int?
  UserPlayer1   UserPlayers? @relation("UserPlayer1", fields: [userPlayerId1], references: [userPlayerId], onDelete: Cascade)
  userPlayerId2 Int?
  UserPlayer2   UserPlayers? @relation("UserPlayer2", fields: [userPlayerId2], references: [userPlayerId], onDelete: Cascade)
  userPlayerId3 Int?
  UserPlayer3   UserPlayers? @relation("UserPlayer3", fields: [userPlayerId3], references: [userPlayerId], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt 

  @@map("Teams")
}

model Caches {
  cacheId       Int         @id @default(autoincrement())
  userId        Int
  users         Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  cacheChange   Int
  cacheSource   Int      

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt 

  @@map("Caches")
}

model MatchLogs {
  matchLogId    Int         @id @default(autoincrement())
  userId        Int 
  Users         Users       @relation("Users", fields: [userId], references: [userId])      
  enemyUserId   Int  
  EnemyUsers    Users       @relation("EnemyUsers", fields: [enemyUserId], references: [userId])  

  isWin         Int
  playedAt      DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("MatchLogs")
}


model Players {
  playerId      Int          @id @default(autoincrement())
  name          String       @unique
  position      Int       
  speed         Int
  decision      Int
  power         Int
  defense       Int
  stamina       Int
  tierId        Int          
  tiers         Tiers       @relation(fields: [tierId], references: [tierId], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt 

  @@map("Players")
}

model Tiers {
  tierId        Int         @id @default(autoincrement())
  tierName      String      
  probability   Int
  price         Int

  players       Players[]

  @@map("Tiers")
}